1.Ans
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int result = 0;
        int size = nums.size();
        for (int i = 0; i < size - 1; i += 2) {
            result += nums[i];
        }
        return result;
    }
};
2.Ans
set<int> s;
for(int i=0;i<candytype.size();i++){
s.insert(candytype[i]);
}
return min(s.size(),n/2);
3.Ans
class Solution {
public:
    int findLHS(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int len=0;
        for(int i=1,s=0,new_s=0;i<nums.size();i++){
            if(nums[i]-nums[s]>1){
                s=new_s;
            }
            if(nums[i]!=nums[i-1])
                new_s=i;
            if(nums[i]-nums[s]==1)
                len=max(len,i-s+1);
        }
        return len;

        
    }
};
4.Ans
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        if (n == 0) {
            return true;
        }
        for (int i = 0; i < flowerbed.size(); i++) {
            if (flowerbed[i] == 0 && (i == 0 || flowerbed[i-1] == 0) && (i == flowerbed.size()-1 || flowerbed[i+1] == 0)) {
                flowerbed[i] = 1;
                n--;
                if (n == 0) {
                    return true;
                }
            }
        }
        return false;
    }
};

5.Ans
class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int n=nums.size();
    
    if (nums.size() < 3)
        return -1;
 
    // will contain max product
    int max_product = INT_MIN;
 
    for (int i = 0; i < n - 2; i++)
        for (int j = i + 1; j < n - 1; j++)
            for (int k = j + 1; k < n; k++)
                max_product = max(max_product,
                        nums[i] * nums[j] * nums[k]);
 
    return max_product;

        
    }
};

6.Ans

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s=0;
        int e=nums.size()-1;
        int mid=s+(e-s)/2;
        while(s<=e){
            if(target==nums[mid]){
                return mid;
            }
            else if(target<nums[mid]){
                e=mid-1;
            }
            else{
                s=mid+1;
            }
            mid=s+(e-s)/2;

        }
        return -1;
        
    }
};

7.Ans
class Solution {
public:
    bool isMonotonic(vector<int>& nums) {
        int count1=1;
        int count2=1;
        for(int i=0;i<nums.size()-1;i++){
        if(nums[i]>=nums[i+1]){
            count1++;
        }
        if(nums[i]<=nums[i+1]){
            count2++;
        }
        }
        if(count1==nums.size() || count2==nums.size()){
            return true;
        }
    return false;    
8.Ans
class Solution {
public:
    int partitionArray(std::vector<int>& nums, int k) {
        int n = nums.size();
        int l = 0, r = 0, groups = 0;

        // Sort the elements
        std::sort(nums.begin(), nums.end());

        while (r < n) {
            // Move right pointer until the difference between the left and the right pointer is <= k
            if (nums[r] - nums[l] <= k) {
                r++;
            }
            // Update the group count and the left pointer
            else {
                groups++;
                l = r;
            }
        }

        return groups + 1;
    }
};











